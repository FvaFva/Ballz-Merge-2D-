//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.2
//     from Assets/Ballz + Merge/UserInput/MainInputMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Ballz + Merge/UserInput/MainInputMap.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @MainInputMap: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @MainInputMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""version"": 1,
    ""name"": ""MainInputMap"",
    ""maps"": [
        {
            ""name"": ""MainInput"",
            ""id"": ""335fc25a-de6c-4e91-a9bc-c302eb57db31"",
            ""actions"": [
                {
                    ""name"": ""StrikeVector"",
                    ""type"": ""Value"",
                    ""id"": ""1d5e6894-dc72-4a26-990c-11db221b666d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shot"",
                    ""type"": ""Button"",
                    ""id"": ""9c29a5e3-c9c1-45b0-ba7d-ea0bb9db0f48"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""9447dfd9-c755-430b-8585-d6a771e8dc33"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StrikePosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""05f68337-e817-4df3-a643-4c9c14508ee7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScreenInteract"",
                    ""type"": ""Button"",
                    ""id"": ""cb0e04f8-c094-43a5-98de-95f309dedefc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScreenRotation"",
                    ""type"": ""Value"",
                    ""id"": ""99458c0d-e2fa-449a-b4c9-597109226ae5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Scroll"",
                    ""type"": ""Value"",
                    ""id"": ""911a5211-830e-4966-8d65-485e84e14b6c"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1a58d808-1a58-49e4-a119-57d7f1ab54a1"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepade"",
                    ""action"": ""StrikeVector"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a894bb7d-7bd9-490f-8960-64bba8f11b5e"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Sensor"",
                    ""action"": ""StrikeVector"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""704629d2-a7dd-48c9-9f95-4f5423e103ed"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""StrikeVector"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e01dff0-c1f2-4d6f-ab44-dde2a8a91b9a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Shot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8feb1e58-e1a9-4547-ae2b-e7d88efa96e3"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Sensor"",
                    ""action"": ""Shot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""18d36b83-2a4a-4457-a32e-a3d7639bdeb2"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Sensor"",
                    ""action"": ""Shot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""80945a28-405e-4acb-822f-33ded3c94a7a"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f610b64-c362-4286-b639-463bcb80c606"",
                    ""path"": ""<Gamepad>/{Menu}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepade"",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2b9cbb4e-d7c7-4b7c-9628-967bf5ae2b6e"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Sensor"",
                    ""action"": ""StrikePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d8b7c5a-8d0b-4aef-bf5b-0f17892aa1f4"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StrikePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""340262e3-cacf-409e-b99e-8b0b1401fd32"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""ScreenInteract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cc569197-e1a7-4b4b-afed-ba7a2f532306"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Sensor"",
                    ""action"": ""ScreenInteract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fe238753-81bf-49c6-b0d7-710a6e30cc25"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""ScreenRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d5a3e9bd-27fc-4a7d-a795-13e81554e9d2"",
                    ""path"": ""<Touchscreen>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScreenRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a47c92fd-6d46-4758-89cf-aab1e1a756de"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepade"",
            ""bindingGroup"": ""Gamepade"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Sensor"",
            ""bindingGroup"": ""Sensor"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Gyroscope>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Accelerometer>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // MainInput
        m_MainInput = asset.FindActionMap("MainInput", throwIfNotFound: true);
        m_MainInput_StrikeVector = m_MainInput.FindAction("StrikeVector", throwIfNotFound: true);
        m_MainInput_Shot = m_MainInput.FindAction("Shot", throwIfNotFound: true);
        m_MainInput_Escape = m_MainInput.FindAction("Escape", throwIfNotFound: true);
        m_MainInput_StrikePosition = m_MainInput.FindAction("StrikePosition", throwIfNotFound: true);
        m_MainInput_ScreenInteract = m_MainInput.FindAction("ScreenInteract", throwIfNotFound: true);
        m_MainInput_ScreenRotation = m_MainInput.FindAction("ScreenRotation", throwIfNotFound: true);
        m_MainInput_Scroll = m_MainInput.FindAction("Scroll", throwIfNotFound: true);
    }

    ~@MainInputMap()
    {
        UnityEngine.Debug.Assert(!m_MainInput.enabled, "This will cause a leak and performance issues, MainInputMap.MainInput.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MainInput
    private readonly InputActionMap m_MainInput;
    private List<IMainInputActions> m_MainInputActionsCallbackInterfaces = new List<IMainInputActions>();
    private readonly InputAction m_MainInput_StrikeVector;
    private readonly InputAction m_MainInput_Shot;
    private readonly InputAction m_MainInput_Escape;
    private readonly InputAction m_MainInput_StrikePosition;
    private readonly InputAction m_MainInput_ScreenInteract;
    private readonly InputAction m_MainInput_ScreenRotation;
    private readonly InputAction m_MainInput_Scroll;
    /// <summary>
    /// Provides access to input actions defined in input action map "MainInput".
    /// </summary>
    public struct MainInputActions
    {
        private @MainInputMap m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public MainInputActions(@MainInputMap wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "MainInput/StrikeVector".
        /// </summary>
        public InputAction @StrikeVector => m_Wrapper.m_MainInput_StrikeVector;
        /// <summary>
        /// Provides access to the underlying input action "MainInput/Shot".
        /// </summary>
        public InputAction @Shot => m_Wrapper.m_MainInput_Shot;
        /// <summary>
        /// Provides access to the underlying input action "MainInput/Escape".
        /// </summary>
        public InputAction @Escape => m_Wrapper.m_MainInput_Escape;
        /// <summary>
        /// Provides access to the underlying input action "MainInput/StrikePosition".
        /// </summary>
        public InputAction @StrikePosition => m_Wrapper.m_MainInput_StrikePosition;
        /// <summary>
        /// Provides access to the underlying input action "MainInput/ScreenInteract".
        /// </summary>
        public InputAction @ScreenInteract => m_Wrapper.m_MainInput_ScreenInteract;
        /// <summary>
        /// Provides access to the underlying input action "MainInput/ScreenRotation".
        /// </summary>
        public InputAction @ScreenRotation => m_Wrapper.m_MainInput_ScreenRotation;
        /// <summary>
        /// Provides access to the underlying input action "MainInput/Scroll".
        /// </summary>
        public InputAction @Scroll => m_Wrapper.m_MainInput_Scroll;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_MainInput; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="MainInputActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(MainInputActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="MainInputActions" />
        public void AddCallbacks(IMainInputActions instance)
        {
            if (instance == null || m_Wrapper.m_MainInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainInputActionsCallbackInterfaces.Add(instance);
            @StrikeVector.started += instance.OnStrikeVector;
            @StrikeVector.performed += instance.OnStrikeVector;
            @StrikeVector.canceled += instance.OnStrikeVector;
            @Shot.started += instance.OnShot;
            @Shot.performed += instance.OnShot;
            @Shot.canceled += instance.OnShot;
            @Escape.started += instance.OnEscape;
            @Escape.performed += instance.OnEscape;
            @Escape.canceled += instance.OnEscape;
            @StrikePosition.started += instance.OnStrikePosition;
            @StrikePosition.performed += instance.OnStrikePosition;
            @StrikePosition.canceled += instance.OnStrikePosition;
            @ScreenInteract.started += instance.OnScreenInteract;
            @ScreenInteract.performed += instance.OnScreenInteract;
            @ScreenInteract.canceled += instance.OnScreenInteract;
            @ScreenRotation.started += instance.OnScreenRotation;
            @ScreenRotation.performed += instance.OnScreenRotation;
            @ScreenRotation.canceled += instance.OnScreenRotation;
            @Scroll.started += instance.OnScroll;
            @Scroll.performed += instance.OnScroll;
            @Scroll.canceled += instance.OnScroll;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="MainInputActions" />
        private void UnregisterCallbacks(IMainInputActions instance)
        {
            @StrikeVector.started -= instance.OnStrikeVector;
            @StrikeVector.performed -= instance.OnStrikeVector;
            @StrikeVector.canceled -= instance.OnStrikeVector;
            @Shot.started -= instance.OnShot;
            @Shot.performed -= instance.OnShot;
            @Shot.canceled -= instance.OnShot;
            @Escape.started -= instance.OnEscape;
            @Escape.performed -= instance.OnEscape;
            @Escape.canceled -= instance.OnEscape;
            @StrikePosition.started -= instance.OnStrikePosition;
            @StrikePosition.performed -= instance.OnStrikePosition;
            @StrikePosition.canceled -= instance.OnStrikePosition;
            @ScreenInteract.started -= instance.OnScreenInteract;
            @ScreenInteract.performed -= instance.OnScreenInteract;
            @ScreenInteract.canceled -= instance.OnScreenInteract;
            @ScreenRotation.started -= instance.OnScreenRotation;
            @ScreenRotation.performed -= instance.OnScreenRotation;
            @ScreenRotation.canceled -= instance.OnScreenRotation;
            @Scroll.started -= instance.OnScroll;
            @Scroll.performed -= instance.OnScroll;
            @Scroll.canceled -= instance.OnScroll;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="MainInputActions.UnregisterCallbacks(IMainInputActions)" />.
        /// </summary>
        /// <seealso cref="MainInputActions.UnregisterCallbacks(IMainInputActions)" />
        public void RemoveCallbacks(IMainInputActions instance)
        {
            if (m_Wrapper.m_MainInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="MainInputActions.AddCallbacks(IMainInputActions)" />
        /// <seealso cref="MainInputActions.RemoveCallbacks(IMainInputActions)" />
        /// <seealso cref="MainInputActions.UnregisterCallbacks(IMainInputActions)" />
        public void SetCallbacks(IMainInputActions instance)
        {
            foreach (var item in m_Wrapper.m_MainInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="MainInputActions" /> instance referencing this action map.
    /// </summary>
    public MainInputActions @MainInput => new MainInputActions(this);
    private int m_PCSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    private int m_GamepadeSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme GamepadeScheme
    {
        get
        {
            if (m_GamepadeSchemeIndex == -1) m_GamepadeSchemeIndex = asset.FindControlSchemeIndex("Gamepade");
            return asset.controlSchemes[m_GamepadeSchemeIndex];
        }
    }
    private int m_SensorSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme SensorScheme
    {
        get
        {
            if (m_SensorSchemeIndex == -1) m_SensorSchemeIndex = asset.FindControlSchemeIndex("Sensor");
            return asset.controlSchemes[m_SensorSchemeIndex];
        }
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "MainInput" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="MainInputActions.AddCallbacks(IMainInputActions)" />
    /// <seealso cref="MainInputActions.RemoveCallbacks(IMainInputActions)" />
    public interface IMainInputActions
    {
        /// <summary>
        /// Method invoked when associated input action "StrikeVector" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnStrikeVector(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Shot" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnShot(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Escape" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnEscape(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "StrikePosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnStrikePosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ScreenInteract" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnScreenInteract(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ScreenRotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnScreenRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Scroll" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnScroll(InputAction.CallbackContext context);
    }
}
