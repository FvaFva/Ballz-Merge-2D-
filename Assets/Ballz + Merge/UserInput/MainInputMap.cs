//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Ballz + Merge/UserInput/MainInputMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MainInputMap: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MainInputMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MainInputMap"",
    ""maps"": [
        {
            ""name"": ""MainInput"",
            ""id"": ""335fc25a-de6c-4e91-a9bc-c302eb57db31"",
            ""actions"": [
                {
                    ""name"": ""StrikeVector"",
                    ""type"": ""Value"",
                    ""id"": ""1d5e6894-dc72-4a26-990c-11db221b666d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shot"",
                    ""type"": ""Button"",
                    ""id"": ""9c29a5e3-c9c1-45b0-ba7d-ea0bb9db0f48"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MenuRequier"",
                    ""type"": ""Button"",
                    ""id"": ""9447dfd9-c755-430b-8585-d6a771e8dc33"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1a58d808-1a58-49e4-a119-57d7f1ab54a1"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepade"",
                    ""action"": ""StrikeVector"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57083000-9dfb-489f-b364-a59846432a08"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""StrikeVector"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e01dff0-c1f2-4d6f-ab44-dde2a8a91b9a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""80945a28-405e-4acb-822f-33ded3c94a7a"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""MenuRequier"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f610b64-c362-4286-b639-463bcb80c606"",
                    ""path"": ""<Gamepad>/{Menu}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepade"",
                    ""action"": ""MenuRequier"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepade"",
            ""bindingGroup"": ""Gamepade"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // MainInput
        m_MainInput = asset.FindActionMap("MainInput", throwIfNotFound: true);
        m_MainInput_StrikeVector = m_MainInput.FindAction("StrikeVector", throwIfNotFound: true);
        m_MainInput_Shot = m_MainInput.FindAction("Shot", throwIfNotFound: true);
        m_MainInput_MenuRequier = m_MainInput.FindAction("MenuRequier", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MainInput
    private readonly InputActionMap m_MainInput;
    private List<IMainInputActions> m_MainInputActionsCallbackInterfaces = new List<IMainInputActions>();
    private readonly InputAction m_MainInput_StrikeVector;
    private readonly InputAction m_MainInput_Shot;
    private readonly InputAction m_MainInput_MenuRequier;
    public struct MainInputActions
    {
        private @MainInputMap m_Wrapper;
        public MainInputActions(@MainInputMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @StrikeVector => m_Wrapper.m_MainInput_StrikeVector;
        public InputAction @Shot => m_Wrapper.m_MainInput_Shot;
        public InputAction @MenuRequier => m_Wrapper.m_MainInput_MenuRequier;
        public InputActionMap Get() { return m_Wrapper.m_MainInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainInputActions set) { return set.Get(); }
        public void AddCallbacks(IMainInputActions instance)
        {
            if (instance == null || m_Wrapper.m_MainInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainInputActionsCallbackInterfaces.Add(instance);
            @StrikeVector.started += instance.OnStrikeVector;
            @StrikeVector.performed += instance.OnStrikeVector;
            @StrikeVector.canceled += instance.OnStrikeVector;
            @Shot.started += instance.OnShot;
            @Shot.performed += instance.OnShot;
            @Shot.canceled += instance.OnShot;
            @MenuRequier.started += instance.OnMenuRequier;
            @MenuRequier.performed += instance.OnMenuRequier;
            @MenuRequier.canceled += instance.OnMenuRequier;
        }

        private void UnregisterCallbacks(IMainInputActions instance)
        {
            @StrikeVector.started -= instance.OnStrikeVector;
            @StrikeVector.performed -= instance.OnStrikeVector;
            @StrikeVector.canceled -= instance.OnStrikeVector;
            @Shot.started -= instance.OnShot;
            @Shot.performed -= instance.OnShot;
            @Shot.canceled -= instance.OnShot;
            @MenuRequier.started -= instance.OnMenuRequier;
            @MenuRequier.performed -= instance.OnMenuRequier;
            @MenuRequier.canceled -= instance.OnMenuRequier;
        }

        public void RemoveCallbacks(IMainInputActions instance)
        {
            if (m_Wrapper.m_MainInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainInputActions instance)
        {
            foreach (var item in m_Wrapper.m_MainInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainInputActions @MainInput => new MainInputActions(this);
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    private int m_GamepadeSchemeIndex = -1;
    public InputControlScheme GamepadeScheme
    {
        get
        {
            if (m_GamepadeSchemeIndex == -1) m_GamepadeSchemeIndex = asset.FindControlSchemeIndex("Gamepade");
            return asset.controlSchemes[m_GamepadeSchemeIndex];
        }
    }
    public interface IMainInputActions
    {
        void OnStrikeVector(InputAction.CallbackContext context);
        void OnShot(InputAction.CallbackContext context);
        void OnMenuRequier(InputAction.CallbackContext context);
    }
}
